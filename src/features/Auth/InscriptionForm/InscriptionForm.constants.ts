import {
  ACCESS_CARD_FOR_HIMSELF_CREDENTIALS_FORM,
  FILES_USER,
  FORMATION_USER,
} from 'features/Auth/InscriptionForm/InscriptionFormsConstants/InscriptionForms.constants'
import { StepsRecord } from 'pages/SignupPage/SignupPage.type'
import { FilesType } from 'types/interfaces/FormTypes/FilesForm'
import GenericForm, { formTypes } from 'types/interfaces/FormTypes/GenericForm'
import {
  GenderType,
  InterrogativeType,
} from 'types/interfaces/FormTypes/InterrogativeForm'
import CardRequest from 'types/models/CardRequest/CardRequest'

import { SignupAttributes } from 'types/models/AccessCard/SignupAttributes/SignupAttributes'
import { booleanToInterrogative } from 'utils/helpers/interrogative.helpers'
import { InputTypes } from 'types/interfaces/FormTypes/InputObject'
import { InputsConfig } from 'config/constant/inputs.config'
export const YES_LABEL = 'signup.yes'
export const NO_LABEL = 'signup.no'
export const FEMALE_LABEL = 'signup.female'
export const MALE_LABEL = 'signup.male'
export const INPUTS_INSCRIPTION_FORM = (
  stepsRecord: StepsRecord,
  CardRequest?: CardRequest
): GenericForm<unknown, unknown, unknown>[] => {
  return [
    {
      id: 1,
      order: 1,
      name: SignupAttributes.IS_OVER_18,
      type: formTypes.INTERROGATIVE,
      text: 'signup.grater_18',

      value: booleanToInterrogative(stepsRecord.isOver18),
      options: [
        { value: InterrogativeType.YES, label: YES_LABEL },
        { value: InterrogativeType.NO, label: NO_LABEL },
      ],
      validate: (value: unknown) => (value as InterrogativeType[]).length > 0,
    },
    {
      id: 5,
      order: 2,
      name: SignupAttributes.HAVE_CIN,
      type: formTypes.INTERROGATIVE,
      text: 'signup.have_cin',
      dependsOn: {
        id: 1,
        value: InterrogativeType.YES,
      },
      value: booleanToInterrogative(stepsRecord.haveCin),
      options: [
        { value: InterrogativeType.YES, label: YES_LABEL },
        { value: InterrogativeType.NO, label: NO_LABEL },
      ],
      validate: (value: unknown) => (value as InterrogativeType[]).length > 0,
    },
    {
      id: 6,
      order: 3,
      name: SignupAttributes.CIN,
      type: formTypes.INPUTS,
      text: 'signup.cin',

      dependsOn: {
        id: 5,
        value: InterrogativeType.YES,
      },
      value: CardRequest?.documents,
      inputs: FILES_USER(stepsRecord),
    },
    {
      id: 2,
      order: 2,
      name: SignupAttributes.GENDER,
      type: formTypes.INTERROGATIVE,
      text: 'signup.gender',

      value: booleanToInterrogative(stepsRecord.isOver18),
      options: [
        { value: GenderType.FEMALE, label: FEMALE_LABEL },
        { value: GenderType.MALE, label: MALE_LABEL },
      ],
      validate: (value: unknown) => (value as GenderType[]).length > 0,
      dependsOn: {
        id: 5,
        value: InterrogativeType.NO,
      },
    },
    {
      id: 4,
      order: 3,
      name: SignupAttributes.ADDRESS,
      value: null,
      type: formTypes.INPUTS,
      text: 'signup.street',
      isNotValid: true,
      isRequired: true,
      isAutoGenerated: false,
      dependsOn: {
        id: 2,
        value: GenderType.FEMALE,
      },

      inputs: ACCESS_CARD_FOR_HIMSELF_CREDENTIALS_FORM(stepsRecord),
    },
    {
      id: 3,
      order: 2,
      name: SignupAttributes.EMAIL_ADDRESS,
      value: null,
      type: formTypes.INPUTS,
      text: 'signup.email_label',
      description: 'accessCard.email_label',

      dependsOn: {
        id: 2,
        value: GenderType.MALE,
      },
      inputs: FORMATION_USER(stepsRecord),
    },
  ]
}
