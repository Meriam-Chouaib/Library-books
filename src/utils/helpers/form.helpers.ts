import { GlobalVariables } from 'config/constant'
import { InputsArray } from 'types/interfaces/FormTypes/InputObject'
import { ArrayOfFormsForm } from 'types/interfaces/FormTypes/ArrayOfFormsForm'

export const getInputsArrayId = (index: number, forms: InputsArray[]) => {
  return forms[index].id
}

export const getInputsArrayById = (id: number, forms: InputsArray[]) => {
  return forms.filter((form) => form.id === id)
}

export const pushInputsArrayOfFormsValueToRecord = (
  arrayOfForms: ArrayOfFormsForm,
  newValues: Record<string, unknown>
) => {
  if (arrayOfForms.value.formsValues) {
    // return an array
    if (arrayOfForms.isAutoGenerated) {
      const values = arrayOfForms.value?.formsValues.map((formValues, i) => {
        const formId = getInputsArrayId(i, arrayOfForms.forms)
        return {
          ...formValues,
          isPrincipal: formId === arrayOfForms.value.principalForm,
        }
      })
      newValues[arrayOfForms.name] = values
    }
    // return an object when the number of forms is fixed
    else {
      const newObject = {}
      arrayOfForms.value?.formsValues.forEach((formValues, i) => {
        const formId = getInputsArrayId(i, arrayOfForms.forms)
        const objectName =
          arrayOfForms.forms[i]?.inputs[0]?.fieldName ||
          GlobalVariables.EmptyString
        const newField = {
          [objectName]: {
            value: formValues[objectName],
            isPrincipal: formId === arrayOfForms.value.principalForm,
          },
        }
        Object.assign(newObject, newField)
      })
      newValues[arrayOfForms.name] = { ...newObject }
    }
  }
}
