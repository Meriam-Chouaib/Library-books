import { FormProps } from 'components/Forms/GenericForm/InputsForm/InputsForm.type'
import { useEffect, useRef, useState } from 'react'
import { useFormContext } from 'react-hook-form'
import { useTranslation } from 'react-i18next'
import useScroll from 'hooks/useScroll'
import {
  InputsStyle,
  RootStyle,
} from 'components/Forms/GenericForm/InputsForm/InputsForm.style'
import { Box, Stack, Typography } from '@mui/material'
import InfoTooltip from 'components/Forms/Common/InfoTooltip/InfoTooltip'
import FormInfo from 'components/Forms/Common/FormInfo/FormInfo'
import { GlobalVariables } from 'config/constant/global.variables'
import GenericInput from 'components/CustomInputs/GenericInput/GenericInput'
function InputsForm({
  form,
  isAutoGenerated,
  submitCount,
  noScroll,
  onSubmit,
  onEnable,
  withAccordion,
  description,
  selectInputDependedValue,
  dependedInputObject,
  formInformation,
}: Readonly<FormProps>) {
  const [expanded, setExpanded] = useState<boolean>(false)
  const errorFormRef = useRef(null)
  const [isErrors, setIsErrors] = useState(false)
  const formRef = useRef<HTMLFormElement>(null)
  const isDisabled = form.disabled && isAutoGenerated
  const enableText: string =
    typeof form.disabled === 'string' ? form.disabled : 'common.modify'
  const haveLabelText = !!form.text
  const { t } = useTranslation()
  const formMethods = useFormContext()
  if (!withAccordion) {
    useScroll(submitCount, formRef, !submitCount || !isErrors || noScroll)
  }

  if (withAccordion) {
    useScroll(expanded, errorFormRef, !expanded)
  }

  useEffect(() => {
    if (isAutoGenerated || submitCount) {
      submitForm()
    }
    if (form.isNotValid) {
      setExpanded(true)
    } else {
      setExpanded(false)
    }
  }, [submitCount, form.isNotValid])

  const submitForm = formMethods.handleSubmit(
    (values) => {
      setIsErrors(false)
      onSubmit({ isValid: true, values })
    },
    (errors) => {
      setIsErrors(true)
      onSubmit({ isValid: false, errors })
    }
  )

  return (
    <>
      {!withAccordion ? (
        <RootStyle ref={formRef}>
          <Stack spacing={1} sx={{ marginBottom: '20px' }}>
            <Stack direction={'row'} spacing={1}>
              {haveLabelText && (
                <Typography sx={{ marginBottom: isDisabled ? -1.25 : 0 }}>
                  {t(form.text)}
                </Typography>
              )}
              {description && (
                <Box>
                  <InfoTooltip text={description} />
                </Box>
              )}
            </Stack>
            {formInformation && (
              <Box>
                <FormInfo formInformation={formInformation} />
              </Box>
            )}
          </Stack>
          <Stack spacing={4}>
            <InputsStyle
              spacing={{
                xs: haveLabelText ? 1.75 : 4,
                md: isDisabled ? 2.75 : 3,
              }}
              full={
                haveLabelText ? GlobalVariables.TRUE : GlobalVariables.FALSE
              }
            >
              {form.inputs.map((input, i) => (
                <GenericInput
                  key={`form-${i}`}
                  inputObject={input}
                  disabledForm={!!isDisabled}
                  haveText={haveLabelText}
                  selectInputDependedValue={selectInputDependedValue}
                  dependedInputObject={dependedInputObject}
                />
              ))}
            </InputsStyle>
          </Stack>
        </RootStyle>
      ) : (
        <></>
      )}
    </>
  )
}
export default InputsForm
