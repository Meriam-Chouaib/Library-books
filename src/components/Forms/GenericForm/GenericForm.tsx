import { GenericFormProps } from 'components/Forms/GenericForm/GenericForm.type'
import InputsForm from 'components/Forms/GenericForm/InputsForm/InputsForm'
import InterrogativeQuestion from 'components/Forms/InterrogativeQuestion/InterrogativeQuestion'
import { formTypes } from 'types/interfaces/FormTypes/GenericForm'
import { InputsForm as InputsFormType } from 'types/interfaces/FormTypes/InputsForm'
import { InterrogativeForm } from 'types/interfaces/FormTypes/InterrogativeForm'

function GenericForm({
  form,
  isNotActive,
  noScroll,
  alert,
  submitCount,
  isAutoGenerated,
  isLoading,
  isError,
  withAccordion,
  additionalFileDescription,
  onChange,
  onSubmit,
  onEnable,
  onValidateForm,
}: Readonly<GenericFormProps>) {
  if (isNotActive) return null
  switch (form.type) {
    case formTypes.INTERROGATIVE: {
      return (
        <InterrogativeQuestion
          onSelect={(value: string) => onChange(value)}
          {...(form as InterrogativeForm)}
          alert={alert}
        />
      )
    }
    case formTypes.INPUTS: {
      const inputsForm = form as InputsFormType
      return (
        <InputsForm
          form={inputsForm}
          onSubmit={(values: Record<string, unknown>) =>
            onSubmit && onSubmit(values)
          }
          onEnable={onEnable}
          isAutoGenerated={isAutoGenerated}
          submitCount={submitCount}
          noScroll={noScroll}
          withAccordion={withAccordion}
          description={inputsForm.description}
          selectInputDependedValue={inputsForm.selectedInputDependedValue}
          dependedInputObject={inputsForm.dependedInputObject}
          formInformation={inputsForm.formInformation}
        />
      )
    }
  }
}
export default GenericForm
